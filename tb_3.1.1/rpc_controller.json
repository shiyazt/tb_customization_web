{
  "alias": "test1",
  "name": "RPC Controller",
  "descriptor": {
    "type": "rpc",
    "sizeX": 4,
    "sizeY": 2,
    "resources": [],
    "templateHtml": "<link href='https://fonts.googleapis.com/css?family=Orbitron' rel='stylesheet' type='text/css'>\n\n<div class=\"card\" fxLayout=\"column\">\n    <div class=\"content\">\n        <div class=\"item\">\n            <div class=\"title\">\n                {{deviceName | uppercase }}\n            </div>\n            <div class=\"flexbox\">\n                <div class=\"display-value\">\n                    <div style=\"display: flex; flex-direction: column\">\n                        <span class='value'>{{activeStatus ? (value + ' Â°C') : 'OFF'}}  </span>\n                        <div \n                        style=\"height:18px; width: 18px; border: 1px solid #ffc107; border-radius: 2px;\" \n                        [hidden] = \"!smartMode\" > \n                            <mat-icon \n                            style=\"font-size: 15px; color: #ffc107\"\n                            >ac_unit</mat-icon>\n                        </div>\n                        \n                    </div>\n                </div>\n                <div class=\"control-buttons\">\n                    <!--<button (click)=\"decreaseValue()\"-->\n                    <!--[disabled]=\"disableLow\"-->\n                    <!--class=\"control-button\" >-</button>-->\n                    <button\n                    mat-raised-button\n                    matTooltip=\"Increase Temperature\"\n                    (click)=\"increaseValue()\"\n                    [disabled]=\"activeStatus ? disableHigh : true\"\n                    class=\"control-button\"\n                    [ngStyle] = \"{'background-color' : disableHigh ? 'rgba(255, 255, 255, 0.25)' : '#03a9f4' }\"\n                    >\n                        <span class=\"material-icons\">\n                            add\n                        </span>\n                    </button>\n                    <button\n                    mat-raised-button\n                    matTooltip=\"Decrease Temperature\"\n                    (click)=\"decreaseValue()\"\n                    [disabled]=\"activeStatus ? disableLow : true\"\n                    class=\"control-button\"\n                    [ngStyle] = \"{'background-color' : disableLow ? 'rgba(255, 255, 255, 0.25)' : '#03a9f4' }\"\n                    >\n                        <span class=\"material-icons\">\n                            remove\n                        </span>\n                    </button>\n                    \n                </div>\n            </div>\n            \n            <div style=\"display:flex; flex-direction:row; width: 180px;\">\n                <div style=\"text-align: left; flex-grow: 1;\">AC Status : </div>\n                <div style=\"margin : auto;\">\n                    <div class=\"led\"\n                    [ngStyle]=\"{'background-color' : activeStatus ? '#80FF00' : '#F00'}\"></div>\n                </div>\n            </div>\n        \n            <div style=\"display:flex; flex-direction:row; width: 180px; margin: 10px auto 5px 2px;\">\n                <div style=\"text-align: left; flex-grow: 1;\">Health Check: </div>\n                <div style=\"margin : auto;\">\n                    <div class=\"led\"\n                    [ngStyle]=\"{'background-color' : activeStatus ? (healthStatus ? '#80FF00' : '#FF7000') : 'rgba(255, 255, 255, 0.25)' }\"></div>\n                </div>\n            </div>\n        \n            <div style=\"display:flex; flex-direction:row; width: 180px; margin: 10px auto 5px 2px;\">\n                <div style=\"text-align: left; flex-grow: 1;\">Maintenance Check: </div>\n                <div style=\"margin : auto;\">\n                    <div class=\"led\"\n                    [ngStyle]=\"{'background-color' : activeStatus ? (maintStatus ? '#80FF00' : '#FF7000') : 'rgba(255, 255, 255, 0.25)' }\"></div>\n                </div>\n            </div>\n            \n            <div style=\"display: flex; flex-direction: row; justify-content: center; margin: 10px 2px 10px 2px;\">\n                <button \n                mat-fab\n                matTooltip=\"Power Control\"\n                [style.background-color]=\"activeStatus ? '#F00' : '#80FF00'\" \n                (click)=\"pwrCntrl()\"\n                style=\"margin: 0px 5px 0px 5px;\">\n                    <mat-icon>power_settings_new</mat-icon>\n                </button>\n                \n                <button \n                mat-fab\n                matTooltip=\"Refresh\"\n                (click)=\"sendCommand()\" \n                style=\"margin: 0px 5px 0px 5px; background-color : #03a9f4\">\n                    <mat-icon>refresh</mat-icon>\n                   <!--<span class=\"material-icons\"-->\n                   <!--(click)=\"sendCommand()\">-->\n                   <!--     refresh-->\n                   <!-- </span>-->\n                </button>\n                \n                <button mat-fab\n                matTooltip=\"Smart Mode\" \n                [disabled] = \"!activeStatus\"\n                [style.background-color] = \" activeStatus ? '#03a9f4' : '#e0e0e0' \"\n                (click) = \"togglesmartMode()\"\n                style=\"margin: 0px 5px 0px 5px;\" >\n                    <mat-icon>ac_unit</mat-icon>\n                </button>\n                \n            </div>\n        \n        </div>\n    </div>\n</div>",
    "templateCss": "\n\n.card {\n    height : 100%;\n    width : 100%;\n}\n\n.card .content {\n    /*border : 1px solid green;*/\n    margin : 2px;\n    padding : 10px;\n    display: flex;\n    flex-direction: column;\n}\n\n.card .content .item {\n    flex-grow: 1;\n}\n\n.card .content .item .title {\n    /*border : 1px solid red;*/\n    margin : 2px auto 12px auto;\n    font-size: 30px;\n    font-weight: 500;\n    text-align: center;\n}\n\n.card .content .item .flexbox {\n    display: flex;\n    flex-direction: row;\n    margin-bottom: 20px;\n    /*border : 1px solid red;*/\n}\n\n.card .content .item .control-buttons {\n    /*border : 1px solid red;*/\n    display: flex;\n    flex-direction: column;\n}\n\n.card .content .item .control-button {\n    padding : 5px;\n    /*border: 1px solid black;*/\n    /*transition: all 0.4s ease 0s;*/\n    width: 60px;\n    font-size: 25px;\n    border-radius: 5px;\n    background-color: #ff9800;\n    margin : 2px auto 2px auto;\n}\n\n\n.card .content .item .control-button:hover {\n    transition: all 0.4s ease 0s;\n    box-shadow: 5px 40px -10px rgba(0,0,0,0.57);\n    /*background-color: #17b978;*/\n    color : white;\n}\n\n.card .content .item .display-value {\n    flex-grow: 1;\n    border : 1px solid #e2f3f5;\n    border-radius: 5px;\n    margin : 0px 5px 0px 0px;\n    padding: 5px 5px 1px 5px;\n    background-color: black;\n}\n\n.card .content .item .value {\n    font-weight: 500;\n    margin: 15px auto 10px auto;\n    /*padding: 10px;*/\n    font-size: 37px;\n    font-family: 'Orbitron';\n    color : #00c853;\n}\n\n\n.card .content .led {\n    margin: auto;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: rgba(255, 255, 255, 0.25);\n    box-shadow: #000 0 -1px 6px 1px;\n    /*border : 1px solid red;*/\n    \n}",
    "controllerScript": "// import { DatasourceType, widgetType } from '@shared/models/widget.models';\n// import { EntityType } from '@shared/models/entity-type.models';\n\n\nlet lowLimit = 0;\nlet highLimit = 0;\n\nself.onInit = function() {\n   init(); \n   self.ctx.detectChanges();\n}\n\nfunction init() {\n    var scope = self.ctx.$scope;\n    let rpcEnabled = self.ctx.defaultSubscription.rpcEnabled;\n    scope.deviceId = self.ctx.defaultSubscription.targetDeviceId;\n    scope.deviceName = self.ctx.defaultSubscription.targetDeviceName;\n    // self.ctx.$scope.showTitle = false;\n    self.ctx.hideTitlePanel = true;\n    self.ctx.$scope.value = 0;\n    scope.disableHigh = false;\n    scope.disableLow = false;\n    // self.ctx.title = false;\n    \n    if (!rpcEnabled) {\n        self.ctx.$scope.error =\n            'Target device is not set!';\n    }\n    \n    \n    \n    // var commandObservable = self.ctx.controlApi.sendTwoWayCommand(self.ctx.settings.getMethod, {\n    //   method : self.ctx.settings.getMethod,\n    //     value : true    \n    // }, 200);\n    // commandObservable.subscribe(\n    //     function(response){\n    //         console.log('[success]');\n    //         console.log(response);\n    //         self.ctx.$scope.error = \"\";\n    //         self.ctx.$scope.value = response.value.temperature ? response.value.temperature : 0;\n    //         lowLimit = response.config.lowlimit ? response.config.lowlimit : 0;\n    //         highLimit = response.config.highlimit ? response.config.highlimit : 0;\n    //         self.ctx.detectChanges();\n    //     },\n    //     function(rejection){\n    //         console.log('[error]');\n    //         console.log(rejection);\n    //         if (self.ctx.settings.showError) {\n    //             self.ctx.$scope.error =\n    //                 rejection.status + \": \" +\n    //                 rejection.statusText;\n    //             self.ctx.detectChanges();\n    //         }\n    //     }\n    // );\n    \n    self.ctx.$scope.sendCommand = function() {\n       var commandObservable = self.ctx.controlApi.sendTwoWayCommand(self.ctx.settings.getMethod, {\n           method : self.ctx.settings.getMethod,\n            value : true    \n       }, 500);\n        commandObservable.subscribe(\n            function(response){\n                console.log('[success]');\n                console.log(response);\n                self.ctx.$scope.error = \"\";\n                self.ctx.$scope.value = response.value.temperature ? response.value.temperature : 0;\n                lowLimit = response.config.lowlimit ? response.config.lowlimit : 0;\n                highLimit = response.config.highlimit ? response.config.highlimit : 0;\n                scope.activeStatus = response.config.activestatus === true ? true : false;\n                scope.healthStatus = response.config.healthstatus === true ? true : false;\n                scope.maintStatus = response.config.maintstatus === true ? true : false;\n                scope.smartMode = response.config.smartmode === true ? true : false;\n                 self.ctx.detectChanges();\n            },\n            function(rejection){\n                console.log(`[error]`);\n                console.log(rejection);\n                if (self.ctx.settings.showError) {\n                    self.ctx.$scope.error =\n                        rejection.status + \": \" +\n                        rejection.statusText;\n                    self.ctx.detectChanges();\n                }\n            }\n        );\n    }\n    \n    // Function handler to increase temperature value\n    self.ctx.$scope.increaseValue = function() {\n        console.log('increaseValue');\n        if(scope.value >= 0 && scope.value < highLimit){\n            scope.value += 1;\n            self.ctx.controlApi.sendOneWayCommand(self.ctx.settings.setMethod, {\n                mode : 'tempcntrl',\n                value : scope.value    \n            }, 500);\n            scope.disableLow = false;\n        }else{\n            scope.disableHigh = true;\n            scope.disableLow = false;\n        }\n    }\n    \n    // Function handler to decrease temperature value\n    self.ctx.$scope.decreaseValue = function() {\n        console.log('decreaseValue');\n        if(scope.value > 0 && scope.value > lowLimit){\n            scope.value -= 1;\n            self.ctx.controlApi.sendOneWayCommand(self.ctx.settings.setMethod, {\n                mode : 'tempcntrl',\n                value : scope.value    \n            }, 500);\n            scope.disableHigh = false;\n        }else{\n            scope.disableLow = true;\n            scope.disableHigh = false;\n        }\n    }\n    \n    let attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    let entityId = {\n        entityType: \"DEVICE\",\n        id: self.ctx.defaultSubscription.targetDeviceId\n    };\n    attributeService.getEntityAttributes(entityId, 'SERVER_SCOPE', [\"xPos\"])\n    .subscribe(\n        function success(response) {\n            console.log(response);\n            self.ctx.detectChanges();\n        },\n        function fail(rejection) {\n            console.log(rejection);\n        }\n    );\n    \n    \n    // Function handler to change powercontrol value\n    self.ctx.$scope.pwrCntrl = function() {\n        console.log('pwrCntrl');\n        scope.activeStatus = !scope.activeStatus;\n        scope.smartMode = false;\n        \n        \n        var commandObservable = self.ctx.controlApi.sendTwoWayCommand(self.ctx.settings.setMethod, {\n                mode : 'powercontrol',\n                value : scope.activeStatus    \n        }, 500);\n         \n        commandObservable.subscribe(\n            function(response){\n                console.log('[success]');\n                console.log(response);\n                self.ctx.$scope.error = \"\";\n                self.ctx.$scope.value = response.value.temperature ? response.value.temperature : 0;\n                lowLimit = response.config.lowlimit ? response.config.lowlimit : 0;\n                highLimit = response.config.highlimit ? response.config.highlimit : 0;\n                scope.activeStatus = response.config.activestatus === true ? true : false;\n                scope.healthStatus = response.config.healthstatus === true ? true : false;\n                scope.maintStatus = response.config.maintstatus === true ? true : false;\n                scope.smartMode = response.config.smartmode === true ? true : false;\n                 self.ctx.detectChanges();\n            },\n            function(rejection){\n                console.log(`[error]`);\n                console.log(rejection);\n                if (self.ctx.settings.showError) {\n                    self.ctx.$scope.error =\n                        rejection.status + \": \" +\n                        rejection.statusText;\n                    self.ctx.detectChanges();\n                }\n            }\n        );\n\n    }\n    \n    \n    // Function handler to toggle smart mode value\n    self.ctx.$scope.togglesmartMode = function() {\n        console.log('smartMode');\n        scope.smartMode = !scope.smartMode;\n        \n        \n        var commandObservable = self.ctx.controlApi.sendTwoWayCommand(self.ctx.settings.setMethod, {\n                mode : 'smartmode',\n                value : scope.smartMode    \n        }, 500);\n         \n        commandObservable.subscribe(\n            function(response){\n                console.log('[success]');\n                console.log(response);\n                self.ctx.$scope.error = \"\";\n                self.ctx.$scope.value = response.value.temperature ? response.value.temperature : 0;\n                lowLimit = response.config.lowlimit ? response.config.lowlimit : 0;\n                highLimit = response.config.highlimit ? response.config.highlimit : 0;\n                scope.activeStatus = response.config.activestatus === true ? true : false;\n                scope.healthStatus = response.config.healthstatus === true ? true : false;\n                scope.maintStatus = response.config.maintstatus === true ? true : false;\n                scope.smartMode = response.config.smartmode === true ? true : false;\n                 self.ctx.detectChanges();\n            },\n            function(rejection){\n                console.log(`[error]`);\n                console.log(rejection);\n                if (self.ctx.settings.showError) {\n                    self.ctx.$scope.error =\n                        rejection.status + \": \" +\n                        rejection.statusText;\n                    self.ctx.detectChanges();\n                }\n            }\n        );\n\n    }\n    \n    \n    // console.log(scope);\n    \n    self.ctx.$scope.sendCommand();\n    \n    \n    \n}\n\n\n\n\nself.onResize = function() {\n    var scope = self.ctx.$scope;\n    self.ctx.detectChanges();\n}\n\nself.onDestroy = function() {\n}\n",
    "settingsSchema": "{\n    \"schema\" : {\n        \"type\" : \"object\",\n        \"title\" : \"Settings\",\n        \"properties\" : {\n            \"getMethod\" : {\n                \"title\" : \"Get Method\",\n                \"type\" : \"string\",\n                \"default\" : \"getTemperature\"\n            },\n            \"setMethod\" : {\n                \"title\" : \"Set Method\",\n                \"type\" : \"string\",\n                \"default\" : \"setTemperature\"\n            }\n        }\n        \n    }\n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"getMethod\":\"get\",\"setMethod\":\"set\"},\"title\":\"RPC Controller\",\"targetDeviceAliasIds\":[\"d49e23f9-5624-4ea3-18f2-31397b545803\"],\"showTitleIcon\":false,\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"showLegend\":false}"
  }
}